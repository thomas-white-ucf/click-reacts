{"version":3,"sources":["components/Title/index.js","components/Wrapper/index.js","components/Image/index.js","App.js","serviceWorker.js","index.js"],"names":["Title","props","className","children","Wrapper","Image","onClick","shuffleCharacters","id","alt","name","src","image","App","state","characters","selected","score","shuffle","i","length","j","Math","floor","random","checkMatches","setState","console","log","this","forEach","item","concat","map","character","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"glDAOeA,MAJf,SAAeC,GACb,OAAO,wBAAIC,UAAU,SAASD,EAAME,W,MCGvBC,MAJf,SAAiBH,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAME,W,MCc1BE,MAdf,SAAeJ,GAEX,OACE,yBAAKC,UAAU,cAAcI,QAAS,kBAAML,EAAMM,kBAAkBN,EAAMO,MACtE,yBAAKN,UAAU,iBACZ,yBAAKO,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,SAEpC,yBAAKV,UAAU,WACX,2BAAID,EAAMS,S,OCqETG,E,2MAtEdC,MAAQ,CACPC,aACAC,SAAU,CAAE,IACZC,MAAO,G,EA4BRC,QAAU,SAACH,GACV,IAAK,IAAII,EAAIJ,EAAWK,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC/C,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADK,EAEZ,CAAEJ,EAAWM,GAAIN,EAAWI,IAA7DJ,EAAWI,GAFkC,KAE9BJ,EAAWM,GAFmB,KAIhD,OAAON,G,EAGRR,kBAAoB,SAACC,GAMpB,EAAKiB,aAAajB,GAClB,EAAKU,QAAQH,GACb,EAAKW,SAAS,CAAEX,gB,4EAzCJP,GAAK,IAAD,OAChBmB,QAAQC,IAAI,CAAEpB,OAEGqB,KAAKf,MAAME,SAGnBc,SAAQ,SAACC,GACbA,IAASvB,GACZmB,QAAQC,IAAI,aAEZ,EAAKF,SAAS,CAAET,MAAO,IACvB,EAAKS,SAAS,CAAEV,SAAU,CAAE,MAC5BW,QAAQC,IAAI,EAAKd,MAAME,YAEvBW,QAAQC,IAAI,sBAGZ,EAAKF,SAAS,CAAEV,SAAU,EAAKF,MAAME,SAASgB,OAAOxB,KACrD,EAAKkB,SAAS,CAAET,MAAO,EAAKH,MAAMG,MAAQ,IAC1CU,QAAQC,IAAI,EAAKd,MAAME,gB,+BAyBhB,IAAD,OACR,OACC,kBAAC,EAAD,KACC,kBAAC,EAAD,gCACA,kBAAC,EAAD,kBACA,kBAAC,EAAD,eAAea,KAAKf,MAAMG,OACzBY,KAAKf,MAAMC,WAAWkB,KAAI,SAACC,GAAD,OAC1B,kBAAC,EAAD,CACC3B,kBAAmB,EAAKA,kBACxBC,GAAI0B,EAAU1B,GACd2B,IAAKD,EAAU1B,GACfE,KAAMwB,EAAUxB,KAChBE,MAAOsB,EAAUtB,gB,GAhELwB,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9c96bf05.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n// import { promised } from \"q\";\n\nfunction Image(props) {\n\n    return (\n      <div className=\"card remove\" onClick={() => props.shuffleCharacters(props.id)}>\n          <div className=\"img-container\">\n             <img alt={props.name} src={props.image} />\n          </div>\n          <div className=\"content\">\n              <p>{props.name}</p>\n          </div>\n        </div>\n    );\n}\n\nexport default Image;\n\n// <p>\n//   Hello {this.state.firstName} {this.state.lastName}\n// </p>\n// <form className=\"form\">\n//   <input\n//     value={this.state.firstName}\n//     name=\"firstName\"\n//     onChange={this.handleInputChange}\n//     type=\"text\"\n//     placeholder=\"First Name\"\n//   />\n//   <input\n//     value={this.state.lastName}\n//     name=\"lastName\"\n//     onChange={this.handleInputChange}\n//     type=\"text\"\n//     placeholder=\"Last Name\"\n//   />\n//   <input\n//     value={this.state.password}\n//     name=\"password\"\n//     onChange={this.handleInputChange}\n//     type=\"password\"\n//     placeholder=\"Password\"\n//   />\n//   <button onClick={this.handleFormSubmit}>Submit</button>\n// </form>","import React, { Component } from 'react';\n// import Form from \"./components/Form\";\nimport Title from './components/Title';\nimport Wrapper from './components/Wrapper';\nimport Image from './components/Image';\nimport characters from './characters.json';\n\n// console.log({ characters });\n\nclass App extends Component {\n\t// Setting this.state.friends to the characters json array\n\tstate = {\n\t\tcharacters,\n\t\tselected: [ 99 ],\n\t\tscore: 0\n\t};\n\n\tcheckMatches(id) {\n\t\tconsole.log({ id });\n\n\t\tconst selected = this.state.selected;\n\n\t\t// add current id to keep Unique Selections only, if duplicate selected, Restart the Game\n\t\tselected.forEach((item) => {\n\t\t\tif (item === id) {\n\t\t\t\tconsole.log('Game Over');\n\t\t\t\t// * Lost Game - id selected already in array\n\t\t\t\tthis.setState({ score: 0 });\n\t\t\t\tthis.setState({ selected: [ 99 ] });\n\t\t\t\tconsole.log(this.state.selected);\n\t\t\t} else {\n\t\t\t\tconsole.log('Unique id selected');\n\t\t\t\t// * Add the unique id to the array\n\t\t\t\t// * Update Score\n\t\t\t\tthis.setState({ selected: this.state.selected.concat(id) });\n\t\t\t\tthis.setState({ score: this.state.score + 1 });\n\t\t\t\tconsole.log(this.state.selected);\n\t\t\t}\n\t\t});\n\n\t}\n\n\tshuffle = (characters) => {\n\t\tfor (let i = characters.length - 1; i > 0; i--) {\n\t\t\tconst j = Math.floor(Math.random() * (i + 1));\n\t\t\t[ characters[i], characters[j] ] = [ characters[j], characters[i] ];\n\t\t}\n\t\treturn characters;\n\t};\n\n\tshuffleCharacters = (id) => {\n\t\t// console.log({ id });\n\n\t\t// * Check if selection was aleady made\n\t\t// * Shuffle Array Character Cards, Increment Score\n\t\t// * Set this.state.characters equal to the new shuffled characters array\n\t\tthis.checkMatches(id);\n\t\tthis.shuffle(characters);\n\t\tthis.setState({ characters });\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<Wrapper>\n\t\t\t\t<Title>Select Only New Images!</Title>\n\t\t\t\t<Title>Goodluck!</Title>\n\t\t\t\t<Title>Score: {this.state.score}</Title>\n\t\t\t\t{this.state.characters.map((character) => (\n\t\t\t\t\t<Image\n\t\t\t\t\t\tshuffleCharacters={this.shuffleCharacters}\n\t\t\t\t\t\tid={character.id}\n\t\t\t\t\t\tkey={character.id}\n\t\t\t\t\t\tname={character.name}\n\t\t\t\t\t\timage={character.image}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</Wrapper>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}