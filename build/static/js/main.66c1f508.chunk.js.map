{"version":3,"sources":["components/Form/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","state","firstName","lastName","password","handleInputChange","event","value","target","name","substring","setState","handleFormSubmit","preventDefault","length","alert","this","className","onChange","type","placeholder","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6NAkFeA,G,iNA7EbC,MAAQ,CACNC,UAAW,GACXC,SAAU,GACVC,SAAU,I,EAGZC,kBAAoB,SAAAC,GAElB,IAAIC,EAAQD,EAAME,OAAOD,MACnBE,EAAOH,EAAME,OAAOC,KAEb,aAATA,IACFF,EAAQA,EAAMG,UAAU,EAAG,KAG7B,EAAKC,SAAL,eACGF,EAAOF,K,EAIZK,iBAAmB,SAAAN,GAEjBA,EAAMO,iBACD,EAAKZ,MAAMC,WAAc,EAAKD,MAAME,SAE9B,EAAKF,MAAMG,SAASU,OAAS,EACtCC,MAAM,iCAAD,OAC8B,EAAKd,MAAMC,UADzC,YACsD,EAAKD,MAC3DE,WAGLY,MAAM,SAAD,OAAU,EAAKd,MAAMC,UAArB,YAAkC,EAAKD,MAAME,WAPlDY,MAAM,6CAUR,EAAKJ,SAAS,CACZT,UAAW,GACXC,SAAU,GACVC,SAAU,M,wEAMZ,OACE,6BACE,oCACSY,KAAKf,MAAMC,UADpB,IACgCc,KAAKf,MAAME,UAE3C,0BAAMc,UAAU,QACd,2BACEV,MAAOS,KAAKf,MAAMC,UAClBO,KAAK,YACLS,SAAUF,KAAKX,kBACfc,KAAK,OACLC,YAAY,eAEd,2BACEb,MAAOS,KAAKf,MAAME,SAClBM,KAAK,WACLS,SAAUF,KAAKX,kBACfc,KAAK,OACLC,YAAY,cAEd,2BACEb,MAAOS,KAAKf,MAAMG,SAClBK,KAAK,WACLS,SAAUF,KAAKX,kBACfc,KAAK,WACLC,YAAY,aAEd,4BAAQC,QAASL,KAAKJ,kBAAtB,gB,GAxESU,cCIJC,MAJf,WACE,OAAO,kBAAC,EAAD,OCQWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.66c1f508.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./style.css\";\n\nclass Form extends Component {\n  // Setting the component's initial state\n  state = {\n    firstName: \"\",\n    lastName: \"\",\n    password: \"\"\n  };\n\n  handleInputChange = event => {\n    // Getting the value and name of the input which triggered the change\n    let value = event.target.value;\n    const name = event.target.name;\n\n    if (name === \"password\") {\n      value = value.substring(0, 15);\n    }\n    // Updating the input's state\n    this.setState({\n      [name]: value\n    });\n  };\n\n  handleFormSubmit = event => {\n    // Preventing the default behavior of the form submit (which is to refresh the page)\n    event.preventDefault();\n    if (!this.state.firstName || !this.state.lastName) {\n      alert(\"Fill out your first and last name please!\");\n    } else if (this.state.password.length < 6) {\n      alert(\n        `Choose a more secure password ${this.state.firstName} ${this.state\n          .lastName}`\n      );\n    } else {\n      alert(`Hello ${this.state.firstName} ${this.state.lastName}`);\n    }\n\n    this.setState({\n      firstName: \"\",\n      lastName: \"\",\n      password: \"\"\n    });\n  };\n\n  render() {\n    // Notice how each input has a `value`, `name`, and `onChange` prop\n    return (\n      <div>\n        <p>\n          Hello {this.state.firstName} {this.state.lastName}\n        </p>\n        <form className=\"form\">\n          <input\n            value={this.state.firstName}\n            name=\"firstName\"\n            onChange={this.handleInputChange}\n            type=\"text\"\n            placeholder=\"First Name\"\n          />\n          <input\n            value={this.state.lastName}\n            name=\"lastName\"\n            onChange={this.handleInputChange}\n            type=\"text\"\n            placeholder=\"Last Name\"\n          />\n          <input\n            value={this.state.password}\n            name=\"password\"\n            onChange={this.handleInputChange}\n            type=\"password\"\n            placeholder=\"Password\"\n          />\n          <button onClick={this.handleFormSubmit}>Submit</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Form;\n","import React from \"react\";\nimport Form from \"./components/Form\";\n\nfunction App() {\n  return <Form />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}